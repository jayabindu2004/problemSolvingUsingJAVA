## Problem Statement:
Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray

## Code

public class Solution {
    public ArrayList<Integer> maxset(ArrayList<Integer> A) {
        long maxSum = -1; // Use long for sum to handle large integer values
        long currentSum = 0;
        int start = 0;
        int end = -1;
        int currentStart = 0;

        for (int i = 0; i < A.size(); i++) {
            int current = A.get(i);

            if (current >= 0) {
                currentSum += current;

                if (currentSum > maxSum || (currentSum == maxSum && end - start < i - currentStart)) {
                    maxSum = currentSum;
                    start = currentStart;
                    end = i;
                }
            } else {
                currentSum = 0;
                currentStart = i + 1; // Move the currentStart index to the next element
            }
        }

        if (end == -1) {
            return new ArrayList<>(); // No non-negative integers found
        }

        // Create and return the subarray with the maximum sum
        return new ArrayList<>(A.subList(start, end + 1));
    }
}
